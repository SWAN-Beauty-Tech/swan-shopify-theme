{% doc %}
  @prompt
    I want to build a block with a video on the left side and text on the right half. The video should be Oriented for 9:16 video formats and the text on the right side should appear when the user scrolls to this section and also slightly disappear when the user is scrolling further, leaving this section.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-text-section-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    {% comment %} min-height: 100vh; {% endcomment %}
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
    overflow: hidden;
  }

  .ai-video-text-container-{{ ai_gen_id }} {
    display: flex;
    width: 100%;
    max-width: {{ settings.page_width }}px;
    margin: 0 auto;
    padding: 0 20px;
    gap: {{ block.settings.content_gap }}px;
  }

  .ai-video-column-{{ ai_gen_id }} {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .ai-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: {{ block.settings.video_max_width }}px;
    aspect-ratio: 9 / 16;
    border-radius: {{ block.settings.video_border_radius }}px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }

  .ai-video-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 60px;
    height: 60px;
    opacity: 0.5;
  }

  .ai-text-column-{{ ai_gen_id }} {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 0 {{ block.settings.text_padding }}px;
    opacity: 0;
    transform: translateX(50px);
    transition: opacity 0.8s ease, transform 0.8s ease;
  }

  .ai-text-column-{{ ai_gen_id }}.visible {
    opacity: 1;
    transform: translateX(0);
  }

  .ai-heading-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0 0 {{ block.settings.text_spacing }}px 0;
    line-height: 1.2;
    font-weight: {{ block.settings.heading_weight }};
  }

  .ai-text-content-{{ ai_gen_id }} {
    font-size: {{ block.settings.text_size }}px;
    color: {{ block.settings.text_color }};
    line-height: 1.6;
    margin: 0 0 {{ block.settings.text_spacing }}px 0;
  }

  .ai-button-{{ ai_gen_id }} {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: {{ block.settings.button_padding_vertical }}px {{ block.settings.button_padding_horizontal }}px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    text-decoration: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: {{ block.settings.button_text_size }}px;
    font-weight: 600;
    transition: background-color 0.3s ease, transform 0.2s ease;
    align-self: flex-start;
    margin-top: {{ block.settings.text_spacing }}px;
  }

  .ai-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
    transform: translateY(-2px);
  }

  @media screen and (max-width: 768px) {
    .ai-video-text-section-{{ ai_gen_id }} {
      min-height: auto;
      padding: {{ block.settings.section_padding | times: 0.6 }}px 0;
    }

    .ai-video-text-container-{{ ai_gen_id }} {
      flex-direction: column;
      gap: {{ block.settings.content_gap | times: 0.8 }}px;
      padding: 0 16px;
    }

    .ai-video-wrapper-{{ ai_gen_id }} {
      max-width: 280px;
    }

    .ai-text-column-{{ ai_gen_id }} {
      padding: 0;
      text-align: center;
    }

    .ai-heading-{{ ai_gen_id }} {
      font-size: {{ block.settings.heading_size | times: 0.8 }}px;
    }

    .ai-text-content-{{ ai_gen_id }} {
      font-size: {{ block.settings.text_size | times: 0.9 }}px;
    }

    .ai-button-{{ ai_gen_id }} {
      align-self: center;
    }
  }
{% endstyle %}

<video-text-section-{{ ai_gen_id }}
  class="ai-video-text-section-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-text-container-{{ ai_gen_id }}">
    <div class="ai-video-column-{{ ai_gen_id }}">
      <div class="ai-video-wrapper-{{ ai_gen_id }}">
        {% if block.settings.video %}
          <video
            class="ai-video-{{ ai_gen_id }}"
            autoplay
            muted
            loop
            playsinline
            preload="metadata"
          >
            <source src="{{ block.settings.video }}" type="video/mp4"></video>
        {% else %}
          <div class="ai-video-placeholder-{{ ai_gen_id }}">
            {{ 'image' | placeholder_svg_tag }}
          </div>
        {% endif %}
      </div>
    </div>

    <div class="ai-text-column-{{ ai_gen_id }}" data-text-content>
      {% if block.settings.heading != blank %}
        <h2 class="ai-heading-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
      {% endif %}

      {% if block.settings.text_content != blank %}
        <div class="ai-text-content-{{ ai_gen_id }}">{{ block.settings.text_content }}</div>
      {% endif %}

      {% if block.settings.button_text != blank and block.settings.button_link != blank %}
        <a href="{{ block.settings.button_link }}" class="ai-button-{{ ai_gen_id }}">
          {{ block.settings.button_text }}
        </a>
      {% endif %}
    </div>
  </div>
</video-text-section-{{ ai_gen_id }}>

<script>
  (function() {
    class VideoTextSection{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.textColumn = null;
        this.observer = null;
      }

      connectedCallback() {
        this.textColumn = this.querySelector('[data-text-content]');
        this.setupScrollObserver();
      }

      disconnectedCallback() {
        if (this.observer) {
          this.observer.disconnect();
        }
      }

      setupScrollObserver() {
        const options = {
          root: null,
          rootMargin: '-20% 0px -20% 0px',
          threshold: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
        };

        this.observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            const ratio = entry.intersectionRatio;
            
            if (ratio > 0.1) {
              this.textColumn.classList.add('visible');
              const opacity = Math.min(ratio * 1.5, 1);
              this.textColumn.style.opacity = opacity;
              
              const translateX = Math.max(50 - (ratio * 75), 0);
              this.textColumn.style.transform = `translateX(${translateX}px)`;
            } else {
              this.textColumn.classList.remove('visible');
              this.textColumn.style.opacity = '0';
              this.textColumn.style.transform = 'translateX(50px)';
            }
          });
        }, options);

        this.observer.observe(this);
      }
    }

    customElements.define('video-text-section-{{ ai_gen_id }}', VideoTextSection{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Video with text",
  "settings": [
    {
      "type": "header",
      "content": "Video"
    },
    {
      "type": "url",
      "id": "video",
      "label": "Video URL"
    },
    {
      "type": "range",
      "id": "video_max_width",
      "min": 200,
      "max": 500,
      "step": 10,
      "unit": "px",
      "label": "Video max width",
      "default": 350
    },
    {
      "type": "range",
      "id": "video_border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Video border radius",
      "default": 16
    },
    {
      "type": "header",
      "content": "Text content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Discover something amazing"
    },
    {
      "type": "richtext",
      "id": "text_content",
      "label": "Text",
      "default": "<p>Share your story with engaging content that captures attention and drives action.</p>"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Learn more"
    },
    {
      "type": "url",
      "id": "button_link",
      "label": "Button link"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Section padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "content_gap",
      "min": 20,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Content gap",
      "default": 60
    },
    {
      "type": "range",
      "id": "text_padding",
      "min": 0,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Text padding",
      "default": 20
    },
    {
      "type": "range",
      "id": "text_spacing",
      "min": 10,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Text spacing",
      "default": 20
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 24,
      "max": 72,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 48
    },
    {
      "type": "select",
      "id": "heading_weight",
      "label": "Heading weight",
      "options": [
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "600",
          "label": "Semi bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "700"
    },
    {
      "type": "range",
      "id": "text_size",
      "min": 14,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Text size",
      "default": 16
    },
    {
      "type": "range",
      "id": "button_text_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Button text size",
      "default": 16
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover background",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Button style"
    },
    {
      "type": "range",
      "id": "button_padding_vertical",
      "min": 8,
      "max": 24,
      "step": 2,
      "unit": "px",
      "label": "Vertical padding",
      "default": 14
    },
    {
      "type": "range",
      "id": "button_padding_horizontal",
      "min": 16,
      "max": 48,
      "step": 4,
      "unit": "px",
      "label": "Horizontal padding",
      "default": 28
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    }
  ],
  "presets": [
    {
      "name": "Video with text"
    }
  ]
}
{% endschema %}
{% doc %}
  @prompt
    I want to build a block with a video on the left side and text on the right half. The video should be Oriented for 9:16 video formats and the text on the right side should appear when the user scrolls to this section and also slightly disappear when the user is scrolling further, leaving this section.
    I Want to have the possibility to upload the video directly or via a link. The video could be a gif or mp4 format and should autoplay in a loop.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-text-section-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    {% comment %} min-height: 100vh; {% endcomment %}
    gap: 40px;
    padding: 60px 20px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .ai-video-container-{{ ai_gen_id }} {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .ai-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 400px;
    aspect-ratio: 9/16;
    border-radius: {{ block.settings.video_border_radius }}px;
    overflow: hidden;
    background-color: #f4f4f4;
  }

  .ai-video-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
    position: relative;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-video-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 12px 20px;
    font-size: 14px;
    color: #666;
    text-align: center;
    pointer-events: none;
  }

  .ai-text-container-{{ ai_gen_id }} {
    flex: 1;
    padding: 40px;
    opacity: 0;
    transform: translateX(50px);
    transition: opacity 0.8s ease, transform 0.8s ease;
  }

  .ai-text-container-{{ ai_gen_id }}.visible {
    opacity: 1;
    transform: translateX(0);
  }

  .ai-text-heading-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0 0 20px 0;
    line-height: 1.2;
  }

  .ai-text-content-{{ ai_gen_id }} {
    font-size: {{ block.settings.text_size }}px;
    color: {{ block.settings.text_color }};
    line-height: 1.6;
  }

  .ai-text-content-{{ ai_gen_id }} p {
    margin: 0 0 16px 0;
  }

  .ai-text-content-{{ ai_gen_id }} p:last-child {
    margin-bottom: 0;
  }

  @media screen and (max-width: 768px) {
    .ai-video-text-section-{{ ai_gen_id }} {
      flex-direction: column;
      gap: 30px;
      padding: 40px 20px;
      min-height: auto;
    }

    .ai-video-wrapper-{{ ai_gen_id }} {
      max-width: 300px;
    }

    .ai-text-container-{{ ai_gen_id }} {
      padding: 20px;
      transform: translateY(30px);
    }

    .ai-text-container-{{ ai_gen_id }}.visible {
      transform: translateY(0);
    }

    .ai-text-heading-{{ ai_gen_id }} {
      font-size: {{ block.settings.heading_size | times: 0.8 }}px;
    }

    .ai-text-content-{{ ai_gen_id }} {
      font-size: {{ block.settings.text_size | times: 0.9 }}px;
    }
  }
{% endstyle %}<video-text-section-{{ ai_gen_id }}
  class="ai-video-text-section-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-container-{{ ai_gen_id }}">
    <div class="ai-video-wrapper-{{ ai_gen_id }}">
      {% if block.settings.video_file != blank %}
        <video
          class="ai-video-{{ ai_gen_id }}"
          autoplay
          muted
          loop
          playsinline
          preload="metadata"
        >
          <source src="{{ block.settings.video_file }}" type="video/mp4">
        </video>
      {% elsif block.settings.video_url != blank %}
        <video
          class="ai-video-{{ ai_gen_id }}"
          autoplay
          muted
          loop
          playsinline
          preload="metadata"
        >
          <source src="{{ block.settings.video_url }}" type="video/mp4">
        </video>
      {% else %}
        <div class="ai-video-placeholder-{{ ai_gen_id }}">
          {{ 'image' | placeholder_svg_tag }}
          <div class="ai-video-empty-state-{{ ai_gen_id }}">
            Add a video file or URL
          </div>
        </div>
      {% endif %}
    </div>
  </div>

  <div class="ai-text-container-{{ ai_gen_id }}">
    {% if block.settings.heading != blank %}
      <h2 class="ai-text-heading-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
    {% endif %}
    
    {% if block.settings.text != blank %}
      <div class="ai-text-content-{{ ai_gen_id }}">{{ block.settings.text }}</div>
    {% endif %}
  </div>
</video-text-section-{{ ai_gen_id }}>

<script>
  (function() {
    class VideoTextSection{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.textContainer = null;
        this.observer = null;
        this.scrollHandler = null;
      }

      connectedCallback() {
        this.textContainer = this.querySelector('.ai-text-container-{{ ai_gen_id }}');
        this.setupIntersectionObserver();
        this.setupScrollHandler();
      }

      disconnectedCallback() {
        if (this.observer) {
          this.observer.disconnect();
        }if (this.scrollHandler) {
          window.removeEventListener('scroll', this.scrollHandler);
        }
      }

      setupIntersectionObserver() {
        const options = {
          root: null,
          rootMargin: '-20% 0px -20% 0px',
          threshold: 0
        };

        this.observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              this.textContainer.classList.add('visible');}
          });
        }, options);

        this.observer.observe(this);
      }

      setupScrollHandler() {
        let ticking = false;

        this.scrollHandler = () => {
          if (!ticking) {
            requestAnimationFrame(() => {
              this.updateTextOpacity();
              ticking = false;
            });
            ticking = true;
          }
        };

        window.addEventListener('scroll', this.scrollHandler, { passive: true });
      }

      updateTextOpacity() {
        const rect = this.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        const elementTop = rect.top;
        const elementBottom = rect.bottom;
        const elementHeight = rect.height;
        
        let opacity = 1;
        
        if (elementTop > windowHeight * 0.8) {
          opacity = 0;
        } else if (elementBottom < windowHeight * 0.2) {
          const fadeDistance = windowHeight * 0.2;
          const distanceFromBottom = Math.abs(elementBottom);
          opacity = Math.max(0, 1 - (distanceFromBottom / fadeDistance));
        } else if (elementTop < windowHeight * 0.2 && elementTop > 0) {
          const fadeDistance = windowHeight * 0.2;
          opacity = elementTop / fadeDistance;
        } else if (elementBottom > windowHeight * 0.8 && elementBottom < windowHeight) {
          const fadeDistance = windowHeight * 0.2;
          const distanceFromTop = windowHeight - elementBottom;
          opacity = distanceFromTop / fadeDistance;
        }
        
        if (this.textContainer.classList.contains('visible')) {
          this.textContainer.style.opacity = Math.max(0.1, opacity);
        }
      }
    }

    customElements.define('video-text-section-{{ ai_gen_id }}', VideoTextSection{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Video with text",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Video"
    },
    {
      "type": "video",
      "id": "video_file",
      "label": "Video file"
    },
    {
      "type": "url",
      "id": "video_url",
      "label": "Video URL"
    },
    {
      "type": "range",
      "id": "video_border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Video border radius",
      "default": 12
    },
    {
      "type": "header",
      "content": "Text content"
    },
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "Heading",
      "default": "Your story starts here"
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "Text",
      "default": "<p>Share your brand story, highlight key features, or describe what makes your product special. This text will animate in as users scroll to this section.</p>"
    },
    {
      "type": "header",
      "content": "Text style"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 36
    },
    {
      "type": "range",
      "id": "text_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Text size",
      "default": 16
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#666666"
    }
  ],
  "presets": [
    {
      "name": "Video with text"
    }
  ]
}
{% endschema %}
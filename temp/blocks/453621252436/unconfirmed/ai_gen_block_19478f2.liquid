{% doc %}
  @prompt
    I want to build a block with a video on the left side and text on the right half. The video should be Oriented for 9:16 video formats and the text on the right side should appear when the user scrolls to this section and also slightly disappear when the user is scrolling further, leaving this section. It should be possible to Upload the video directly to Shopify or through an embedded link. Furthermore we should be able to enable/deactivate Auto-Play of the video., The text should Appear within the videoplaying screen and disappear After 4 seconds, when the User Stays on top the video. The video should not have any boarders and be in full view on an iPhone device, The text should appear and hover above the video and stay for 4 seconds before it disappears. The embedded video should have no boarders and in a full screen view using the mobile view.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-text-section-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    min-height: 100vh;
    gap: 40px;
    padding: 40px 20px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .ai-video-container-{{ ai_gen_id }} {
    flex: 0 0 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
  }

  .ai-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 400px;
    aspect-ratio: 9/16;
    overflow: hidden;
    background-color: #000;
    border-radius: 0;
  }

  .ai-video-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border: none;
    outline: none;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    color: #ccc;
  }

  .ai-video-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 12px 20px;
    font-size: 14px;
    color: #666;
    text-align: center;
    pointer-events: none;
  }

  .ai-text-overlay-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    color: {{ block.settings.overlay_text_color }};
    z-index: 10;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.6s ease, visibility 0.6s ease;
    padding: 30px;
    max-width: 85%;
    pointer-events: none;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 12px;
    backdrop-filter: blur(8px);
  }

  .ai-text-overlay-{{ ai_gen_id }}.visible {
    opacity: 1;
    visibility: visible;
  }

  .ai-overlay-heading-{{ ai_gen_id }} {
    font-size: {{ block.settings.overlay_heading_size }}px;
    margin: 0 0 15px 0;
    font-weight: 700;
    text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
    line-height: 1.2;
  }

  .ai-overlay-text-{{ ai_gen_id }} {
    font-size: {{ block.settings.overlay_text_size }}px;
    line-height: 1.5;
    text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.8);
  }

  .ai-overlay-text-{{ ai_gen_id }} p {
    margin: 00 10px 0;
  }

  .ai-overlay-text-{{ ai_gen_id }} p:last-child {
    margin-bottom: 0;
  }

  .ai-text-container-{{ ai_gen_id }} {
    flex: 1;
    padding-left: 40px;
    opacity: 0;
    transform: translateX(50px);
    transition: opacity 0.8s ease, transform 0.8s ease;
  }

  .ai-text-container-{{ ai_gen_id }}.visible {
    opacity: 1;
    transform: translateX(0);
  }

  .ai-text-heading-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0 0 20px 0;
    font-weight: 600;
  }

  .ai-text-content-{{ ai_gen_id }} {
    font-size: {{ block.settings.text_size }}px;
    color: {{ block.settings.text_color }};
    line-height: 1.6;
  }

  .ai-text-content-{{ ai_gen_id }} p {
    margin: 0 0 16px 0;
  }

  .ai-text-content-{{ ai_gen_id }} p:last-child {
    margin-bottom: 0;
  }

  @media screen and (max-width: 768px) {
    .ai-video-text-section-{{ ai_gen_id }} {
      flex-direction: column;
      gap: 0;
      min-height: 100vh;
      padding: 0;
    }

    .ai-video-container-{{ ai_gen_id }} {
      flex: none;
      width: 100vw;
      height: 100vh;
      max-width: none;
      margin: 0;
      position: relative;
      left: 50%;
      right: 50%;
      margin-left: -50vw;
      margin-right: -50vw;
    }

    .ai-video-wrapper-{{ ai_gen_id }} {
      width: 100%;
      height: 100%;
      max-width: none;
      aspect-ratio: auto;
      border-radius: 0;
    }

    .ai-video-{{ ai_gen_id }} {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border: none;
      outline: none;
    }

    .ai-text-container-{{ ai_gen_id }} {
      display: none;
    }

    .ai-text-overlay-{{ ai_gen_id }} {
      padding: 25px;
      max-width: 90%;
      background: rgba(0, 0, 0, 0.4);
      border-radius: 8px;
    }

    .ai-overlay-heading-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.overlay_heading_size }}px * 0.85);
      margin-bottom: 12px;
    }

    .ai-overlay-text-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.overlay_text_size }}px * 0.9);
    }
  }

  @media screen and (max-width: 480px) {
    .ai-text-overlay-{{ ai_gen_id }} {
      padding: 20px;
      max-width: 95%;
    }

    .ai-overlay-heading-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.overlay_heading_size }}px * 0.75);
    }

    .ai-overlay-text-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.overlay_text_size }}px * 0.85);
    }
  }
{% endstyle %}

<video-text-section-{{ ai_gen_id }}
  class="ai-video-text-section-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-container-{{ ai_gen_id }}">
    <div class="ai-video-wrapper-{{ ai_gen_id }}">
      {% if block.settings.video_file != blank %}
        <video
          class="ai-video-{{ ai_gen_id }}"
          {% if block.settings.autoplay %}autoplay{% endif %}
          muted
          loop
          playsinline
          preload="metadata"
        >
          <source src="{{ block.settings.video_file }}" type="video/mp4">
        </video>
      {% elsif block.settings.video_url != blank %}
        {% if block.settings.video_url contains 'youtube.com' or block.settings.video_url contains 'youtu.be' %}
          {% assign video_id = block.settings.video_url | split: '/' | last | split: '?' | first | split: '&' | first %}
          {% if block.settings.video_url contains 'watch?v=' %}
            {% assign video_id = block.settings.video_url | split: 'watch?v=' | last | split: '&' | first %}
          {% endif %}
          <iframe
            class="ai-video-{{ ai_gen_id }}"
            src="https://www.youtube.com/embed/{{ video_id }}?{% if block.settings.autoplay %}autoplay=1&{% endif %}mute=1&loop=1&playlist={{ video_id }}&controls=0&showinfo=0&rel=0&modestbranding=1&iv_load_policy=3&fs=0&disablekb=1"
            frameborder="0"
            allow="autoplay; encrypted-media"
            allowfullscreen
            style="border: none; outline: none;"
          ></iframe>
        {% elsif block.settings.video_url contains 'vimeo.com' %}
          {% assign video_id = block.settings.video_url | split: '/' | last | split: '?' | first %}
          <iframe
            class="ai-video-{{ ai_gen_id }}"
            src="https://player.vimeo.com/video/{{ video_id }}?{% if block.settings.autoplay %}autoplay=1&{% endif %}muted=1&loop=1&background=1&controls=0&title=0&byline=0&portrait=0"
            frameborder="0"
            allow="autoplay; fullscreen"
            allowfullscreen
            style="border: none; outline: none;"
          ></iframe>
        {% else %}
          <video
            class="ai-video-{{ ai_gen_id }}"
            {% if block.settings.autoplay %}autoplay{% endif %}
            muted
            loop
            playsinline
            preload="metadata"
          >
            <source src="{{ block.settings.video_url }}" type="video/mp4">
          </video>
        {% endif %}
      {% else %}
        <div class="ai-video-placeholder-{{ ai_gen_id }}">
          {{ 'hero-apparel-1' | placeholder_svg_tag }}<div class="ai-video-empty-state-{{ ai_gen_id }}">
            Add a video file or video URL
          </div>
        </div>
      {% endif %}

      {% if block.settings.overlay_heading != blank or block.settings.overlay_text != blank %}
        <div class="ai-text-overlay-{{ ai_gen_id }}">
          {% if block.settings.overlay_heading != blank %}
            <h2 class="ai-overlay-heading-{{ ai_gen_id }}">{{ block.settings.overlay_heading }}</h2>
          {% endif %}
          {% if block.settings.overlay_text != blank %}
            <div class="ai-overlay-text-{{ ai_gen_id }}">{{ block.settings.overlay_text }}</div>
          {% endif %}
        </div>
      {% endif %}
    </div>
  </div>

  <div class="ai-text-container-{{ ai_gen_id }}">
    {% if block.settings.heading != blank %}
      <h2 class="ai-text-heading-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
    {% endif %}
    {% if block.settings.text != blank %}
      <div class="ai-text-content-{{ ai_gen_id }}">{{ block.settings.text }}</div>
    {% endif %}
  </div>
</video-text-section-{{ ai_gen_id }}><script>
  (function() {
    class VideoTextSection{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.textContainer = null;
        this.textOverlay = null;
        this.observer = null;
        this.overlayTimeout = null;
        this.isOverlayVisible = false;
        this.hasShownOverlay = false;
      }

      connectedCallback() {
        this.textContainer = this.querySelector('.ai-text-container-{{ ai_gen_id }}');
        this.textOverlay = this.querySelector('.ai-text-overlay-{{ ai_gen_id }}');
        this.setupScrollObserver();
      }

      disconnectedCallback() {
        if (this.observer) {
          this.observer.disconnect();
        }
        if (this.overlayTimeout) {
          clearTimeout(this.overlayTimeout);
        }
      }

      setupScrollObserver() {
        const options = {
          root: null,
          rootMargin: '-10% 0px -10% 0px',
          threshold: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
        };

        this.observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            const ratio = entry.intersectionRatio;
            if (ratio > 0.3) {
              if (this.textContainer) {
                this.textContainer.classList.add('visible');
                const opacity = Math.min(1, ratio * 1.2);
                const translateX = Math.max(0, 50 - (ratio * 60));
                
                this.textContainer.style.opacity = opacity;
                this.textContainer.style.transform = `translateX(${translateX}px)`;
              }

              if (this.textOverlay && !this.hasShownOverlay) {
                this.showOverlayText();
                this.hasShownOverlay = true;
              }
            } else if (ratio < 0.1) {
              if (this.textContainer) {
                this.textContainer.classList.remove('visible');
                this.textContainer.style.opacity = '0';
                this.textContainer.style.transform = 'translateX(50px)';
              }

              if (this.textOverlay && this.isOverlayVisible) {
                this.hideOverlayText();}

              this.hasShownOverlay = false;
            }
          });
        }, options);

        this.observer.observe(this);
      }

      showOverlayText() {
        if (!this.textOverlay || this.isOverlayVisible) return;
        
        this.isOverlayVisible = true;
        this.textOverlay.classList.add('visible');

        if (this.overlayTimeout) {
          clearTimeout(this.overlayTimeout);
        }

        this.overlayTimeout = setTimeout(() => {
          this.hideOverlayText();
        }, 4000);
      }

      hideOverlayText() {
        if (!this.textOverlay) return;
        
        this.isOverlayVisible = false;
        this.textOverlay.classList.remove('visible');

        if (this.overlayTimeout) {
          clearTimeout(this.overlayTimeout);
          this.overlayTimeout = null;
        }
      }
    }

    customElements.define('video-text-section-{{ ai_gen_id }}', VideoTextSection{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Video with text overlay",
  "settings": [
    {
      "type": "header",
      "content": "Video"
    },
    {
      "type": "video",
      "id": "video_file",
      "label": "Video file"
    },
    {
      "type": "url",
      "id": "video_url",
      "label": "Video URL"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay video",
      "default": true
    },
    {
      "type": "header",
      "content": "Overlay text"
    },
    {
      "type": "inline_richtext",
      "id": "overlay_heading",
      "label": "Overlay heading",
      "default": "Welcome"
    },
    {
      "type": "richtext",
      "id": "overlay_text",
      "label": "Overlay text",
      "default": "<p>Discover something amazing</p>"
    },
    {
      "type": "range",
      "id": "overlay_heading_size",
      "min": 18,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Overlay heading size",
      "default": 32
    },
    {
      "type": "range",
      "id": "overlay_text_size",
      "min": 14,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Overlay text size",
      "default": 18
    },
    {
      "type": "color",
      "id": "overlay_text_color",
      "label": "Overlay text color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Side text content"
    },
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "Heading",
      "default": "Your story begins here"
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "Text",
      "default": "<p>Share your brand story, highlight key features, or describe what makes your products special. This text will animate smoothly as visitors scroll through your page.</p>"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 36
    },
    {
      "type": "range",
      "id": "text_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Text size",
      "default": 16
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#666666"
    }
  ],
  "presets": [
    {
      "name": "Video with text overlay"
    }
  ]
}
{% endschema %}
{% doc %}
  @prompt
    A section with a header title in the center.
    Underneath I want to have 7 video player windows from left to right where only the one which is in the center is zoomed in and playable through an additional clicking. The user can scroll left to right to get a new video to the center and let this video play. The video formats are 9:16, the video in the center should always be the biggest one and the one which is playable

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-carousel-{{ ai_gen_id }} {
    padding: 40px 20px;
    background-color: {{ block.settings.background_color }};}

  .ai-video-carousel__header-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 40px;
  }

  .ai-video-carousel__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    margin: 0;
  }

  .ai-video-carousel__container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .ai-video-carousel__track-{{ ai_gen_id }} {
    display: flex;
    gap: 20px;
    transition: transform 0.5s ease;
    padding: 0 50%;
    margin: 0 -50%;
    align-items: center;
  }

  .ai-video-carousel__item-{{ ai_gen_id }} {
    flex-shrink: 0;
    width: 180px;
    height: 320px;
    position: relative;
    transition: all 0.5s ease;
    cursor: pointer;
    border-radius: {{ block.settings.video_border_radius }}px;
    overflow: hidden;
    opacity: 0.6;
    transform: scale(0.8);
  }

  .ai-video-carousel__item-{{ ai_gen_id }}.center {
    width: 280px;
    height: 498px;
    opacity: 1;
    transform: scale(1);
    z-index: 2;
  }

  .ai-video-carousel__video-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: {{ block.settings.video_border_radius }}px;
  }

  .ai-video-carousel__placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: {{ block.settings.video_border_radius }}px;position: relative;
  }

  .ai-video-carousel__placeholder-{{ ai_gen_id }} svg {
    width: 60px;
    height: 60px;
    opacity: 0.5;
  }

  .ai-video-carousel__empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 12px;
    color: #666;
    text-align: center;
    pointer-events: none;
  }

  .ai-video-carousel__play-button-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60px;
    height: 60px;
    background-color: {{ block.settings.play_button_color }};
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 3;
  }

  .ai-video-carousel__item-{{ ai_gen_id }}.center .ai-video-carousel__play-button-{{ ai_gen_id }} {
    opacity: 1;
  }

  .ai-video-carousel__item-{{ ai_gen_id }}:not(.center) .ai-video-carousel__play-button-{{ ai_gen_id }} {
    display: none;
  }

  .ai-video-carousel__play-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.play_button_hover_color }};
  }

  .ai-video-carousel__play-button-{{ ai_gen_id }} svg {
    width: 24px;
    height: 24px;
    fill: {{ block.settings.play_button_icon_color }};margin-left: 3px;
  }

  .ai-video-carousel__nav-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: {{ block.settings.nav_button_color }};
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 4;
    transition: background-color 0.3s ease;
  }

  .ai-video-carousel__nav-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.nav_button_hover_color }};
  }

  .ai-video-carousel__nav-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
    fill: {{ block.settings.nav_button_icon_color }};
  }

  .ai-video-carousel__nav--prev-{{ ai_gen_id }} {
    left: 20px;
  }

  .ai-video-carousel__nav--next-{{ ai_gen_id }} {
    right: 20px;
  }

  @media screen and (max-width: 768px) {
    .ai-video-carousel__item-{{ ai_gen_id }} {
      width: 120px;
      height: 213px;
    }

    .ai-video-carousel__item-{{ ai_gen_id }}.center {
      width: 200px;
      height: 356px;
    }

    .ai-video-carousel__track-{{ ai_gen_id }} {
      gap: 15px;
    }

    .ai-video-carousel__play-button-{{ ai_gen_id }} {
      width: 50px;
      height: 50px;
    }

    .ai-video-carousel__play-button-{{ ai_gen_id }} svg {
      width: 20px;
      height: 20px;
    }
  }
{% endstyle %}<video-carousel-{{ ai_gen_id }}
  class="ai-video-carousel-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.title != blank %}
    <div class="ai-video-carousel__header-{{ ai_gen_id }}">
      <h2 class="ai-video-carousel__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
    </div>
  {% endif %}

  <div class="ai-video-carousel__container-{{ ai_gen_id }}">
    <div class="ai-video-carousel__track-{{ ai_gen_id }}" data-track>
      {% for i in (1..7) %}
        {% liquid
          assign video_key = 'video_' | append: i
          assign video = block.settings[video_key]
        %}
        <div class="ai-video-carousel__item-{{ ai_gen_id }}" data-index="{{ forloop.index0 }}">
          {% if video != blank %}
            <video
              class="ai-video-carousel__video-{{ ai_gen_id }}"
              muted
              loop
              preload="metadata"
              data-video>
              <source src="{{ video }}" type="video/mp4"></video>
            <button class="ai-video-carousel__play-button-{{ ai_gen_id }}" data-play-button>
              <svg viewBox="0 0 24 24">
                <polygon points="5,3 19,12 5,21"></polygon>
              </svg>
            </button>
          {% else %}
            <div class="ai-video-carousel__placeholder-{{ ai_gen_id }}">
              {{ 'image' | placeholder_svg_tag }}<div class="ai-video-carousel__empty-state-{{ ai_gen_id }}">
                Add video {{ i }}
              </div>
            </div>
          {% endif %}
        </div>
      {% endfor %}
    </div>

    <button class="ai-video-carousel__nav-{{ ai_gen_id }} ai-video-carousel__nav--prev-{{ ai_gen_id }}" data-nav="prev">
      <svg viewBox="0 0 24 24">
        <polyline points="15,18 9,12 15,6"></polyline>
      </svg>
    </button>

    <button class="ai-video-carousel__nav-{{ ai_gen_id }} ai-video-carousel__nav--next-{{ ai_gen_id }}" data-nav="next">
      <svg viewBox="0 0 24 24">
        <polyline points="9,18 15,12 9,6"></polyline>
      </svg>
    </button>
  </div>
</video-carousel-{{ ai_gen_id }}>

<script>
  (function() {
    class VideoCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentIndex = 3;
        this.totalItems = 7;
        this.isPlaying = false;
        this.currentVideo = null;
      }

      connectedCallback() {
        this.track = this.querySelector('[data-track]');
        this.items = this.querySelectorAll('.ai-video-carousel__item-{{ ai_gen_id }}');
        this.navButtons = this.querySelectorAll('[data-nav]');
        this.playButtons = this.querySelectorAll('[data-play-button]');
        this.videos = this.querySelectorAll('[data-video]');

        this.setupEventListeners();
        this.updateCarousel();
      }

      setupEventListeners() {
        this.navButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            const direction = e.currentTarget.dataset.nav;
            if (direction === 'prev') {
              this.currentIndex = Math.max(0, this.currentIndex - 1);
            } else {
              this.currentIndex = Math.min(this.totalItems - 1, this.currentIndex + 1);
            }
            this.updateCarousel();
          });
        });

        this.items.forEach((item, index) => {
          item.addEventListener('click', () => {
            if (index !== this.currentIndex) {
              this.currentIndex = index;
              this.updateCarousel();
            } else {
              this.toggleVideo();
            }
          });
        });

        this.playButtons.forEach((button) => {
          button.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleVideo();
          });
        });

        let startX = 0;
        let currentX = 0;
        let isDragging = false;

        this.track.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
          isDragging = true;
        });

        this.track.addEventListener('touchmove', (e) => {
          if (!isDragging) return;
          currentX = e.touches[0].clientX;
        });

        this.track.addEventListener('touchend', () => {
          if (!isDragging) return;
          const diff = startX - currentX;
          if (Math.abs(diff) > 50) {
            if (diff > 0 && this.currentIndex < this.totalItems - 1) {
              this.currentIndex++;
            } else if (diff < 0 && this.currentIndex > 0) {
              this.currentIndex--;
            }
            this.updateCarousel();
          }
          isDragging = false;
        });
      }

      updateCarousel() {
        this.pauseAllVideos();
        
        this.items.forEach((item, index) => {
          item.classList.remove('center');
          
          if (index === this.currentIndex) {
            item.classList.add('center');
          }
        });

        const offset = -(this.currentIndex * 200);
        this.track.style.transform = `translateX(${offset}px)`;}

      toggleVideo() {
        const centerItem = this.items[this.currentIndex];
        const video = centerItem.querySelector('[data-video]');
        const playButton = centerItem.querySelector('[data-play-button]');
        
        if (!video) return;

        if (this.isPlaying && this.currentVideo === video) {
          video.pause();
          this.isPlaying = false;
          this.currentVideo = null;
          playButton.innerHTML = '<svg viewBox="0 0 24 24"><polygon points="5,3 19,12 5,21"></polygon></svg>';
        } else {
          this.pauseAllVideos();
          video.play();
          this.isPlaying = true;
          this.currentVideo = video;
          playButton.innerHTML = '<svg viewBox="0 0 24 24"><rect x="6" y="4" width="4" height="16"></rect><rect x="14" y="4" width="4" height="16"></rect></svg>';
        }
      }

      pauseAllVideos() {
        this.videos.forEach((video, index) => {
          video.pause();
          const playButton = this.playButtons[index];
          if (playButton) {
            playButton.innerHTML = '<svg viewBox="0 0 24 24"><polygon points="5,3 19,12 5,21"></polygon></svg>';
          }
        });this.isPlaying = false;
        this.currentVideo = null;
      }
    }

    customElements.define('video-carousel-{{ ai_gen_id }}', VideoCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Video carousel",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Featured Videos"
    },
    {
      "type": "header",
      "content": "Videos"
    },
    {
      "type": "video",
      "id": "video_1",
      "label": "Video 1"
    },
    {
      "type": "video",
      "id": "video_2",
      "label": "Video 2"
    },
    {
      "type": "video",
      "id": "video_3",
      "label": "Video 3"
    },
    {
      "type": "video",
      "id": "video_4",
      "label": "Video 4"
    },
    {
      "type": "video",
      "id": "video_5",
      "label": "Video 5"
    },
    {
      "type": "video",
      "id": "video_6",
      "label": "Video 6"
    },
    {
      "type": "video",
      "id": "video_7",
      "label": "Video 7"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 32
    },
    {
      "type": "range",
      "id": "video_border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Video border radius",
      "default": 12
    },
    {
      "type": "header",
      "content": "Play button"
    },
    {
      "type": "color",
      "id": "play_button_color",
      "label": "Background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "play_button_hover_color",
      "label": "Hover background color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "play_button_icon_color",
      "label": "Icon color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Navigation buttons"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Hover background color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "nav_button_icon_color",
      "label": "Icon color",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "Video carousel"
    }
  ]
}
{% endschema %}
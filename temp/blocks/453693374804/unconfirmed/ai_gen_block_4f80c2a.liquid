{% doc %}
  @prompt
    I want to build a block with a video on the right side and text on the left half. The video should be Oriented for 9:16 video formats and the text on the right side should appear when the user scrolls to this section and also slightly disappear when the user is scrolling further, leaving this section., I want to build a block with a video on the left side and text on the right half. The video should be Oriented for 9:16 video formats and the text on the right side should appear when the user scrolls to this section and also slightly disappear when the user is scrolling further, leaving this section.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-text-section-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: {{ block.settings.gap }}px;
    padding: {{ block.settings.section_padding }}px0;
    min-height: 100vh;
    overflow: hidden;
  }

  .ai-video-container-{{ ai_gen_id }} {
    flex: 1;
    padding-right: {{ block.settings.gap | divided_by: 2 }}px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .ai-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: {{ block.settings.video_max_width }}px;
    aspect-ratio: 9 / 16;
    border-radius: {{ block.settings.video_border_radius }}px;
    overflow: hidden;
    background-color: #000;
  }

  .ai-video-element-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 80px;
    height: 80px;
    opacity: 0.5;
  }

  .ai-video-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 12px 20px;
    background-color: rgba(255, 255, 255, 0.9);
    border-radius: 8px;
    font-size: 14px;
    color: #666;
    text-align: center;
    pointer-events: none;
  }

  .ai-video-text-content-{{ ai_gen_id }} {
    flex: 1;
    padding-left: {{ block.settings.gap | divided_by: 2 }}px;
    opacity: 0;
    transform: translateX(50px);
    transition: opacity 0.8s ease, transform 0.8s ease;
  }

  .ai-video-text-content-{{ ai_gen_id }}.visible {
    opacity: 1;
    transform: translateX(0);
  }

  .ai-video-text-heading-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0 0 {{ block.settings.text_spacing }}px 0;
    line-height: 1.2;
  }

  .ai-video-text-description-{{ ai_gen_id }} {
    font-size: {{ block.settings.text_size }}px;
    color: {{ block.settings.text_color }};
    line-height: 1.6;
    margin: 0 0 {{ block.settings.text_spacing }}px 0;
  }

  .ai-video-text-button-{{ ai_gen_id }} {
    display: inline-block;
    padding: {{ block.settings.button_padding }}px {{ block.settings.button_padding | times: 1.5 }}px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    text-decoration: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: {{ block.settings.button_text_size }}px;
    transition: background-color 0.3s ease;
  }

  .ai-video-text-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  @media screen and (max-width: 768px) {
    .ai-video-text-section-{{ ai_gen_id }} {
      flex-direction: {{ block.settings.mobile_layout }};
      gap: {{ block.settings.gap | divided_by: 2 }}px;
      min-height: auto;
    }

    .ai-video-container-{{ ai_gen_id }} {
      padding-right: 0;
    }

    .ai-video-text-content-{{ ai_gen_id }} {
      padding-left: 0;
    }

    .ai-video-wrapper-{{ ai_gen_id }} {
      max-width: 300px;
    }

    .ai-video-text-heading-{{ ai_gen_id }} {
      font-size: {{ block.settings.heading_size | times: 0.8 }}px;
    }

    .ai-video-text-description-{{ ai_gen_id }} {
      font-size: {{ block.settings.text_size | times: 0.9 }}px;
    }
  }
{% endstyle %}<video-text-section-{{ ai_gen_id }}
  class="ai-video-text-section-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-container-{{ ai_gen_id }}">
    <div class="ai-video-wrapper-{{ ai_gen_id }}">
      {% if block.settings.video != blank %}
        <video
          class="ai-video-element-{{ ai_gen_id }}"
          autoplay
          muted
          loop
          playsinline
          preload="metadata"
        >
          <source src="{{ block.settings.video }}" type="video/mp4"></video>
      {% else %}
        <div class="ai-video-placeholder-{{ ai_gen_id }}">
          {{ 'image' | placeholder_svg_tag }}<div class="ai-video-empty-state-{{ ai_gen_id }}">
            Add a9:16 video
          </div>
        </div>
      {% endif %}
    </div>
  </div>

  <div class="ai-video-text-content-{{ ai_gen_id }}">
    {% if block.settings.heading != blank %}
      <h2 class="ai-video-text-heading-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
    {% endif %}

    {% if block.settings.description != blank %}
      <div class="ai-video-text-description-{{ ai_gen_id }}">{{ block.settings.description }}</div>
    {% endif %}

    {% if block.settings.button_text != blank and block.settings.button_link != blank %}
      <a href="{{ block.settings.button_link }}" class="ai-video-text-button-{{ ai_gen_id }}">
        {{ block.settings.button_text }}
      </a>
    {% endif %}
  </div>
</video-text-section-{{ ai_gen_id }}>

<script>
  (function() {
    class VideoTextSection{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.textContent = null;
        this.observer = null;
        this.scrollHandler = null;
      }

      connectedCallback() {
        this.textContent = this.querySelector('.ai-video-text-content-{{ ai_gen_id }}');
        this.setupIntersectionObserver();
        this.setupScrollHandler();
      }

      disconnectedCallback() {
        if (this.observer) {
          this.observer.disconnect();
        }if (this.scrollHandler) {
          window.removeEventListener('scroll', this.scrollHandler);
        }
      }

      setupIntersectionObserver() {
        this.observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              this.textContent.classList.add('visible');
            }
          });
        }, {
          threshold: 0.3,rootMargin: '0px 0px -10% 0px'
        });

        this.observer.observe(this);
      }

      setupScrollHandler() {
        let ticking = false;

        this.scrollHandler = () => {
          if (!ticking) {
            requestAnimationFrame(() => {
              this.updateTextOpacity();
              ticking = false;
            });
            ticking = true;
          }
        };

        window.addEventListener('scroll', this.scrollHandler, { passive: true });
      }

      updateTextOpacity() {
        const rect = this.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        const elementTop = rect.top;
        const elementBottom = rect.bottom;
        const elementHeight = rect.height;

        if (elementBottom< 0 || elementTop > windowHeight) {
          return;
        }

        let opacity = 1;

        if (elementTop < windowHeight * 0.3 && elementBottom > windowHeight * 0.7) {
          opacity = 1;
        } else if (elementTop < 0) {
          const visibleHeight = elementBottom;
          const fadeZone = elementHeight * 0.3;
          if (visibleHeight < fadeZone) {
            opacity = Math.max(0.3, visibleHeight / fadeZone);
          }
        } else if (elementBottom > windowHeight) {
          const visibleHeight = windowHeight - elementTop;
          const fadeZone = elementHeight * 0.3;
          if (visibleHeight < fadeZone) {
            opacity = Math.max(0.3, visibleHeight / fadeZone);
          }
        }

        if (this.textContent.classList.contains('visible')) {
          this.textContent.style.opacity = opacity;
        }
      }
    }

    customElements.define('video-text-section-{{ ai_gen_id }}', VideoTextSection{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Video with text",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Watch Our Story"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description",
      "default": "<p>Discover the passion and craftsmanship behind our brand through this immersive video experience.</p>"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Learn More"
    },
    {
      "type": "url",
      "id": "button_link",
      "label": "Button link"
    },
    {
      "type": "header",
      "content": "Video"
    },
    {
      "type": "url",
      "id": "video",
      "label": "Video URL"
    },
    {
      "type": "range",
      "id": "video_max_width",
      "min": 200,
      "max": 500,
      "step": 20,
      "unit": "px",
      "label": "Video max width",
      "default": 400
    },
    {
      "type": "range",
      "id": "video_border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Video border radius",
      "default": 16
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "gap",
      "min": 20,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Gap between content",
      "default": 60
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "select",
      "id": "mobile_layout",
      "label": "Mobile layout",
      "options": [
        {
          "value": "column",
          "label": "Video above text"
        },
        {
          "value": "column-reverse",
          "label": "Text above video"
        }
      ],
      "default": "column"
    },
    {
      "type": "header",
      "content": "Text style"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 36
    },
    {
      "type": "range",
      "id": "text_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Text size",
      "default": 16
    },
    {
      "type": "range",
      "id": "text_spacing",
      "min": 10,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Text spacing",
      "default": 20
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#666666"
    },
    {
      "type": "header",
      "content": "Button style"
    },
    {
      "type": "range",
      "id": "button_text_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Button text size",
      "default": 16
    },
    {
      "type": "range",
      "id": "button_padding",
      "min": 8,
      "max": 24,
      "step": 2,
      "unit": "px",
      "label": "Button padding",
      "default": 12
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Button border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#333333"
    }
  ],
  "presets": [
    {
      "name": "Video with text"
    }
  ]
}
{% endschema %}
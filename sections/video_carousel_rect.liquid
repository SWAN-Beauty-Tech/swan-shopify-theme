{% comment %}
 Create a responsive, centered video carousel with smooth transitions and infinite looping. The carousel should have the following features:
    
    Focus on the center item with adjacent items scaled down
    
    Previous/next buttons on left and right sides
    
    Standing rectangle (portrait) video cards
    
    Mute button at bottom right of each video
    
    Infinite loop functionality with duplicated videos
    
    Smooth transitions between slides
    
    Optimized for mobile with minimal side padding
{% endcomment %}

{% assign ai_gen_id = section.id | replace: '_', '' | downcase %}

{% style %}

/* Desktop */
.block_container {
  padding-block: {{ section.settings.padding_block_desktop }}px;
  padding-inline: {{ section.settings.padding_inline_desktop }}px;
  margin-block: {{ section.settings.margin_block_desktop }}px;
  margin-inline: {{ section.settings.margin_inline_desktop }}px;
}

/* Mobile */
@media (max-width: 767px) {
  .block_container {
    padding-block: {{ section.settings.padding_block_mobile }}px;
    padding-inline: {{ section.settings.padding_inline_mobile }}px;
    margin-block: {{ section.settings.margin_block_mobile }}px;
    margin-inline: {{ section.settings.margin_inline_mobile }}px;
  }
}

  .ai-video-carousel-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 60px 50px;
    overflow: hidden;
  }

  .ai-video-carousel__container-{{ ai_gen_id }} {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    height: {{ section.settings.video_height }}px;
    overflow: hidden;
  }

  .ai-video-carousel__track-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: {{ section.settings.video_gap }}px;
    transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    will-change: transform;
  }

  .ai-video-carousel__slide-{{ ai_gen_id }} {
    position: relative;
    flex-shrink: 0;
    width: {{ section.settings.video_width }}px;
    height: {{ section.settings.video_height }}px;
    border-radius: {{ section.settings.border_radius }}px;
    overflow: hidden;
    background-color: #000;
    transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transform-origin: center;
  }

  .ai-video-carousel__slide-{{ ai_gen_id }}.active {
    transform: scale(1);
    z-index: 2;
  }

  .ai-video-carousel__slide-{{ ai_gen_id }}:not(.active) {
    transform: scale({{ section.settings.inactive_scale | divided_by: 100.0 }});
    opacity: {{ section.settings.inactive_opacity | divided_by: 100.0 }};
  }

  .ai-video-carousel__video-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .ai-video-carousel__placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
    font-size: 14px;
    text-align: center;
    padding: 20px;
  }

  .ai-video-carousel__placeholder-{{ ai_gen_id }} svg {
    width: 60px;
    height: 60px;
    opacity: 0.5;
  }

  .ai-video-carousel__mute-button-{{ ai_gen_id }} {
    position: absolute;
    bottom: 12px;
    right: 12px;
    width: 36px;
    height: 36px;
    background-color: rgba(0, 0, 0, 0.7);
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
    z-index: 3;
  }

  .ai-video-carousel__mute-button-{{ ai_gen_id }}:hover {
    background-color: rgba(0, 0, 0, 0.9);
  }

  .ai-video-carousel__mute-button-{{ ai_gen_id }} svg {
    width: 18px;
    height: 18px;
  }

  .ai-video-carousel__nav-button-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 48px;
    height: 48px;
    background-color: {{ section.settings.nav_button_color }};
    border: none;
    border-radius: 50%;
    color: {{ section.settings.nav_button_icon_color }};
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    z-index: 4;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .ai-video-carousel__nav-button-{{ ai_gen_id }}:hover {
    background-color: {{ section.settings.nav_button_hover_color }};
    transform: translateY(-50%) scale(1.1);
  }

  .ai-video-carousel__nav-button-{{ ai_gen_id }}--prev {
    left: 5px;
  }

  .ai-video-carousel__nav-button-{{ ai_gen_id }}--next {
    right: 5px;
  }

  .ai-video-carousel__nav-button-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
  }

  .ai-video-carousel__empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: #666;
  }

  .ai-video-carousel__empty-state-title-{{ ai_gen_id }} {
    font-size: 18px;
    margin-bottom: 8px;
    color: #333;
  }

  .ai-video-carousel__empty-state-text-{{ ai_gen_id }} {
    font-size: 14px;
  }

  /* Mobile optimizations */
  @media screen and (max-width: 768px) {
    .ai-video-carousel-{{ ai_gen_id }} {
      padding: 40px 10px; /* Reduced side padding for mobile */
    }

    .ai-video-carousel__slide-{{ ai_gen_id }} {
      width: {{ section.settings.video_width | times: 0.75 }}px;
      height: {{ section.settings.video_height | times: 0.75 }}px;
    }

    .ai-video-carousel__nav-button-{{ ai_gen_id }} {
      width: 40px;
      height: 40px;
    }

    .ai-video-carousel__nav-button-{{ ai_gen_id }}--prev {
      left: 2px;
    }

    .ai-video-carousel__nav-button-{{ ai_gen_id }}--next {
      right: 2px;
    }

    .ai-video-carousel__nav-button-{{ ai_gen_id }} svg {
      width: 16px;
      height: 16px;
    }

    .ai-video-carousel__mute-button-{{ ai_gen_id }} {
      width: 32px;
      height: 32px;
      bottom: 8px;
      right: 8px;
    }

    .ai-video-carousel__mute-button-{{ ai_gen_id }} svg {
      width: 14px;
      height: 14px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-video-carousel-{{ ai_gen_id }} {
      padding: 30px 5px; /* Minimal side padding for small screens */
    }

    .ai-video-carousel__slide-{{ ai_gen_id }} {
      width: {{ section.settings.video_width | times: 0.6 }}px;
      height: {{ section.settings.video_height | times: 0.6 }}px;
    }

    .ai-video-carousel__container-{{ ai_gen_id }} {
      height: {{ section.settings.video_height | times: 0.6 }}px;
    }
  }
{% endstyle %}

<video-carousel-component class="ai-video-carousel-{{ ai_gen_id }}" {{ section.shopify_attributes }}>
  {% assign has_videos = false %}
  {% assign video_count = 0 %}
  {% for i in (1..5) %}
    {% assign video_key = 'video_' | append: i %}
    {% if section.settings[video_key] != blank %}
      {% assign has_videos = true %}
      {% assign video_count = video_count | plus: 1 %}
    {% endif %}
  {% endfor %}

  {% if has_videos %}
    <div class="block_container ai-video-carousel__container-{{ ai_gen_id }}">
      <button
        class="ai-video-carousel__nav-button-{{ ai_gen_id }} ai-video-carousel__nav-button-{{ ai_gen_id }}--prev"
        aria-label="Previous video"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
      </button>

      <div class="ai-video-carousel__track-{{ ai_gen_id }}">
        {% comment %} Original videos {% endcomment %}
        {% for i in (1..5) %}
          {% assign video_key = 'video_' | append: i %}
          {% assign video = section.settings[video_key] %}

          {% if video != blank %}
            {% assign preferred_source = '' %}
            {% for source in video.sources %}
              {% unless source.format contains 'm3u8' %}
                {% assign preferred_source = source.url %}
                {% break %}
              {% endunless %}
            {% endfor %}

            {% if preferred_source != '' %}
              <div class="ai-video-carousel__slide-{{ ai_gen_id }}" data-slide-index="{{ forloop.index0 }}" data-original-index="{{ forloop.index0 }}">
                <video
                  class="ai-video-carousel__video-{{ ai_gen_id }}"
                  src="{{ preferred_source }}"
                  loop
                  muted
                  playsinline
                  preload="metadata"
                ></video>

                <button
                  class="ai-video-carousel__mute-button-{{ ai_gen_id }}"
                  aria-label="Toggle mute"
                  data-video-index="{{ forloop.index0 }}"
                >
                  <svg
                    class="ai-video-carousel__mute-icon-{{ ai_gen_id }}"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
                    <line x1="23" y1="9" x2="17" y2="15"></line>
                    <line x1="17" y1="9" x2="23" y2="15"></line>
                  </svg>
                  <svg
                    class="ai-video-carousel__unmute-icon-{{ ai_gen_id }}"
                    style="display: none;"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
                    <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
                  </svg>
                </button>
              </div>
            {% endif %}
          {% endif %}
        {% endfor %}

        {% comment %} Duplicate videos for infinite scroll {% endcomment %}
        {% for i in (1..5) %}
          {% assign video_key = 'video_' | append: i %}
          {% assign video = section.settings[video_key] %}

          {% if video != blank %}
            {% assign preferred_source = '' %}
            {% for source in video.sources %}
              {% unless source.format contains 'm3u8' %}
                {% assign preferred_source = source.url %}
                {% break %}
              {% endunless %}
            {% endfor %}

            {% if preferred_source != '' %}
              <div class="ai-video-carousel__slide-{{ ai_gen_id }}" data-slide-index="{{ forloop.index0 | plus: video_count }}" data-original-index="{{ forloop.index0 }}">
                <video
                  class="ai-video-carousel__video-{{ ai_gen_id }}"
                  src="{{ preferred_source }}"
                  loop
                  muted
                  playsinline
                  preload="metadata"
                ></video>

                <button
                  class="ai-video-carousel__mute-button-{{ ai_gen_id }}"
                  aria-label="Toggle mute"
                  data-video-index="{{ forloop.index0 | plus: video_count }}"
                  data-original-index="{{ forloop.index0 }}"
                >
                  <svg
                    class="ai-video-carousel__mute-icon-{{ ai_gen_id }}"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
                    <line x1="23" y1="9" x2="17" y2="15"></line>
                    <line x1="17" y1="9" x2="23" y2="15"></line>
                  </svg>
                  <svg
                    class="ai-video-carousel__unmute-icon-{{ ai_gen_id }}"
                    style="display: none;"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <polygon points="11,5 6,9 2,9 2,15 6,15 11,19"></polygon>
                    <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
                  </svg>
                </button>
              </div>
            {% endif %}
          {% endif %}
        {% endfor %}
      </div>

      <button
        class="ai-video-carousel__nav-button-{{ ai_gen_id }} ai-video-carousel__nav-button-{{ ai_gen_id }}--next"
        aria-label="Next video"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
    </div>
  {% else %}
    <div class="ai-video-carousel__empty-state-{{ ai_gen_id }}">
      <h3 class="ai-video-carousel__empty-state-title-{{ ai_gen_id }}">Add videos to get started</h3>
      <p class="ai-video-carousel__empty-state-text-{{ ai_gen_id }}">
        Upload videos in the block settings to create your carousel
      </p>
    </div>
  {% endif %}
</video-carousel-component>

<script>
  (function() {
    class VideoCarousel extends HTMLElement {
      constructor() {
        super();
        this.genId = '{{ ai_gen_id }}';
        this.currentIndex = 0;
        this.slides = [];
        this.videos = [];
        this.originalVideoCount = 0;
        this.autoplayInterval = null;
        this.isTransitioning = false;
      }

      connectedCallback() {
        this.slides = Array.from(this.querySelectorAll('.ai-video-carousel__slide-' + this.genId));
        this.videos = Array.from(this.querySelectorAll('.ai-video-carousel__video-' + this.genId));
        this.track = this.querySelector('.ai-video-carousel__track-' + this.genId);
        this.prevButton = this.querySelector('.ai-video-carousel__nav-button-' + this.genId + '--prev');
        this.nextButton = this.querySelector('.ai-video-carousel__nav-button-' + this.genId + '--next');
        this.muteButtons = Array.from(this.querySelectorAll('.ai-video-carousel__mute-button-' + this.genId));

        if (this.slides.length === 0) return;

        this.originalVideoCount = this.slides.length / 2; // Since we duplicate videos
        this.setupEventListeners();
        this.updateCarousel();
        this.startAutoplay();
      }

      disconnectedCallback() {
        this.stopAutoplay();
      }

      setupEventListeners() {
        this.prevButton?.addEventListener('click', () => this.goToPrevious());
        this.nextButton?.addEventListener('click', () => this.goToNext());

        this.muteButtons.forEach((button, index) => {
          button.addEventListener('click', () => this.toggleMute(index));
        });

        this.addEventListener('mouseenter', () => this.stopAutoplay());
        this.addEventListener('mouseleave', () => this.startAutoplay());

        // Add touch/swipe support for mobile
        let startX, startY, currentX, currentY;
        let isSwiping = false;

        this.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
          startY = e.touches[0].clientY;
          isSwiping = true;
        });

        this.addEventListener('touchmove', (e) => {
          if (!isSwiping) return;
          currentX = e.touches[0].clientX;
          currentY = e.touches[0].clientY;
          
          // Prevent vertical scrolling when swiping horizontally
          if (Math.abs(currentX - startX) > Math.abs(currentY - startY)) {
            e.preventDefault();
          }
        });

        this.addEventListener('touchend', (e) => {
          if (!isSwiping) return;
          
          const deltaX = currentX - startX;
          const threshold = 50;

          if (Math.abs(deltaX) > threshold) {
            if (deltaX > 0) {
              this.goToPrevious();
            } else {
              this.goToNext();
            }
          }
          
          isSwiping = false;
        });

        this.videos.forEach((video, index) => {
          video.addEventListener('loadeddata', () => {
            if (index === this.currentIndex) {
              video.play().catch(() => {});
            }
          });
        });

        // Handle infinite scroll reset
        this.track.addEventListener('transitionend', () => {
          this.handleInfiniteScroll();
          this.isTransitioning = false;
        });
      }

      goToNext() {
        if (this.isTransitioning) return;
        this.isTransitioning = true;
        this.currentIndex = (this.currentIndex + 1) % this.slides.length;
        this.updateCarousel();
      }

      goToPrevious() {
        if (this.isTransitioning) return;
        this.isTransitioning = true;
        this.currentIndex = this.currentIndex === 0 ? this.slides.length - 1 : this.currentIndex - 1;
        this.updateCarousel();
      }

      handleInfiniteScroll() {
        if (this.currentIndex >= this.originalVideoCount) {
          // Reset to beginning without animation
          this.track.style.transition = 'none';
          this.currentIndex = this.currentIndex - this.originalVideoCount;
          this.updateCarouselPosition();
          
          // Re-enable transition after a brief delay
          setTimeout(() => {
            this.track.style.transition = 'transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          }, 50);
        } else if (this.currentIndex < 0) {
          // Reset to end without animation
          this.track.style.transition = 'none';
          this.currentIndex = this.currentIndex + this.originalVideoCount;
          this.updateCarouselPosition();
          
          // Re-enable transition after a brief delay
          setTimeout(() => {
            this.track.style.transition = 'transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          }, 50);
        }
      }

      updateCarousel() {
        this.updateCarouselPosition();
        this.updateVideoStates();
      }

      updateCarouselPosition() {
        if (this.slides.length === 0) return;

        const slideWidth = {{ section.settings.video_width }};
        const gap = {{ section.settings.video_gap }};
        const containerWidth = this.track.parentElement.offsetWidth;
        const centerOffset = containerWidth / 2 - slideWidth / 2;
        const translateX = centerOffset - (this.currentIndex * (slideWidth + gap));
        
        this.track.style.transform = `translateX(${translateX}px)`;
      }

      updateVideoStates() {
        this.slides.forEach((slide, index) => {
          const video = this.videos[index];
          if (index === this.currentIndex) {
            slide.classList.add('active');
            if (video) {
              video.play().catch(() => {});
            }
          } else {
            slide.classList.remove('active');
            if (video) {
              video.pause();
            }
          }
        });
      }

      toggleMute(videoIndex) {
        const video = this.videos[videoIndex];
        const button = this.muteButtons[videoIndex];
        const muteIcon = button.querySelector('.ai-video-carousel__mute-icon-' + this.genId);
        const unmuteIcon = button.querySelector('.ai-video-carousel__unmute-icon-' + this.genId);

        if (video.muted) {
          video.muted = false;
          muteIcon.style.display = 'none';
          unmuteIcon.style.display = 'block';
          
          // Sync mute state with duplicate video
          const originalIndex = button.dataset.originalIndex;
          if (originalIndex !== undefined) {
            this.syncMuteState(parseInt(originalIndex), false);
          }
        } else {
          video.muted = true;
          muteIcon.style.display = 'block';
          unmuteIcon.style.display = 'none';
          
          // Sync mute state with duplicate video
          const originalIndex = button.dataset.originalIndex;
          if (originalIndex !== undefined) {
            this.syncMuteState(parseInt(originalIndex), true);
          }
        }
      }

      syncMuteState(originalIndex, muted) {
        // Find all videos with the same original index and sync their mute state
        this.muteButtons.forEach((button, index) => {
          const buttonOriginalIndex = parseInt(button.dataset.originalIndex || button.dataset.videoIndex);
          if (buttonOriginalIndex === originalIndex && index !== this.currentIndex) {
            const video = this.videos[index];
            const muteIcon = button.querySelector('.ai-video-carousel__mute-icon-' + this.genId);
            const unmuteIcon = button.querySelector('.ai-video-carousel__unmute-icon-' + this.genId);
            
            video.muted = muted;
            if (muted) {
              muteIcon.style.display = 'block';
              unmuteIcon.style.display = 'none';
            } else {
              muteIcon.style.display = 'none';
              unmuteIcon.style.display = 'block';
            }
          }
        });
      }

      startAutoplay() {
        if ({{ section.settings.autoplay_enabled | json }} && this.originalVideoCount > 1) {
          this.autoplayInterval = setInterval(() => {
            this.goToNext();
          }, {{ section.settings.autoplay_duration }} * 1000);
        }
      }

      stopAutoplay() {
        if (this.autoplayInterval) {
          clearInterval(this.autoplayInterval);
          this.autoplayInterval = null;
        }
      }
    }

    customElements.define('video-carousel-component', VideoCarousel);
  })();
</script>

{% schema %}
{
  "name": "Video carousel",
  "settings": [
    {
  "type": "range",
  "id": "padding_block_desktop",
  "label": "Padding Block (desktop)",
  "min": 0,
  "max": 100,
  "step": 4,
  "unit": "px",
  "default": 40
},
{
  "type": "range",
  "id": "padding_inline_desktop",
  "label": "Padding Inline (desktop)",
  "min": 0,
  "max": 100,
  "step": 4,
  "unit": "px",
  "default": 40
},
{
  "type": "range",
  "id": "margin_block_desktop",
  "label": "Margin Block (desktop)",
  "min": 0,
  "max": 100,
  "step": 4,
  "unit": "px",
  "default": 20
},
{
  "type": "range",
  "id": "margin_inline_desktop",
  "label": "Margin Inline (desktop)",
  "min": 0,
  "max": 100,
  "step": 4,
  "unit": "px",
  "default": 20
},

{
  "type": "range",
  "id": "padding_block_mobile",
  "label": "Padding Block (mobile)",
  "min": 0,
  "max": 60,
  "step": 2,
  "unit": "px",
  "default": 20
},
{
  "type": "range",
  "id": "padding_inline_mobile",
  "label": "Padding Inline (mobile)",
  "min": 0,
  "max": 60,
  "step": 2,
  "unit": "px",
  "default": 6
},
{
  "type": "range",
  "id": "margin_block_mobile",
  "label": "Margin Block (mobile)",
  "min": 0,
  "max": 60,
  "step": 2,
  "unit": "px",
  "default": 10
},
{
  "type": "range",
  "id": "margin_inline_mobile",
  "label": "Margin Inline (mobile)",
  "min": 0,
  "max": 60,
  "step": 2,
  "unit": "px",
  "default": 6
},
    {
      "type": "header",
      "content": "Videos"
    },
    {
      "type": "video",
      "id": "video_1",
      "label": "Video 1"
    },
    {
      "type": "video",
      "id": "video_2",
      "label": "Video 2"
    },
    {
      "type": "video",
      "id": "video_3",
      "label": "Video 3"
    },
    {
      "type": "video",
      "id": "video_4",
      "label": "Video 4"
    },
    {
      "type": "video",
      "id": "video_5",
      "label": "Video 5"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "video_width",
      "min": 200,
      "max": 400,
      "step": 20,
      "unit": "px",
      "label": "Video width",
      "default": 280
    },
    {
      "type": "range",
      "id": "video_height",
      "min": 300,
      "max": 600,
      "step": 20,
      "unit": "px",
      "label": "Video height",
      "default": 480
    },
    {
      "type": "range",
      "id": "video_gap",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Gap between videos",
      "default": 20
    },
    {
      "type": "range",
      "id": "inactive_scale",
      "min": 60,
      "max": 90,
      "step": 5,
      "unit": "%",
      "label": "Inactive video scale",
      "default": 80
    },
    {
      "type": "range",
      "id": "inactive_opacity",
      "min": 30,
      "max": 80,
      "step": 5,
      "unit": "%",
      "label": "Inactive video opacity",
      "default": 60
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 12
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Button background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Button hover background",
      "default": "#f0f0f0"
    },
    {
      "type": "color",
      "id": "nav_button_icon_color",
      "label": "Button icon color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Autoplay"
    },
    {
      "type": "checkbox",
      "id": "autoplay_enabled",
      "label": "Enable autoplay",
      "default": true
    },
    {
      "type": "range",
      "id": "autoplay_duration",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Autoplay duration",
      "default": 5
    }
  ],
  "presets": [
    {
      "name": "Video carousel"
    }
  ]
}
{% endschema %}